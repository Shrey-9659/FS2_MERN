Mongodb : NoSQL, document-oriented database.
- Stores data in JSON like documents. (BSON - Binary JSON)
- Schema-less
- Developed by Mongodb INC in 2007

When to use Mongodb : 
- Real-time analytics.
- E-com apps
- Content management
- Scalability and distributed

Installation: (Make sure to install the MSI packages)
https://www.mongodb.com/try/download/community
https://www.mongodb.com/try/download/shell
https://www.mongodb.com/try/download/database-tools

Database - Container for collections (Marwadi University)
Collections - Container for documents (Students, Faculties, Other Stuff Members)
Document - JSON like object ({name : "Vipul", roll no. : 55})


Basic Commands
mongosh - it lets you enter inside the mongo shell

Database :
1. show dbs || show databases - Shows the list of databases
2. use <databaseName> - Switch/Create a database
3. db.dropDatabase() - Delete current database

Collections - 
1. db.createCollection("collectionName") - To create a new collection
2. show collections - Shows all the collections in that database
3. db.collectionName.drop() - To delete a collection


CRUD Operation (Create, Read, Update, Delete)

Create Commands -
1. db.collectionName.insertOne({name : "Rahul"}) - Inserts one documents in a collection
2. db.collectionName.insertMany([{name : "Rohit"}, {name : "Shrey"}, {name : "Himanshu"}]) - Insert multiple documents in a collection

Read Commands - 
1. db.collectionName.find() - Shows all the documents present in a collection
2. db.collectionName.findOne() - Shows only one documents which comes first
3. db.collectionName.find({key : value}) - Shows the documents which matches the key-value
4. db.collectionName.find().count() - tell the number of documents

Comparison Operators ->
1. $eq - Equals to
- db.collectionName.find({marks : {$eq : 90}})

2. $ne - Not Equals to
- db.students.find({marks : {$ne : 90}})

3. $gt - Greater Than
- db.students.find({marks : {$gt : 90}})

4. $gte - Greater Than Equals
- db.students.find({marks : {$gte : 90}})

5. $lt - Less Than
- db.students.find({marks : {$lt : 65}})

6. $lte - Less Than Equals
- db.students.find({marks : {$lte : 65}})
7. $in - in
- db.students.find({marks : {$in : [64,90,75]}})

8. $nin - Not in
- db.students.find({marks : {$nin : [64,90,75]}})


Cursor Methods ->
1. count() - tell the number of documents present
- db.students.find().count()

2. limit(n) - Will only display n number of documents
- db.students.find({marks : {$gt : 70}}).limit(5)

3. skip(n) - Will not display the first n number of documents
- db.students.find({marks : {$gt : 70}}).skip(5)

4. sort({key : 1/-1}) - Sorts the documents in ascending (1) or descending (-1) order
- db.students.find().sort({marks : 1})


Logical Operators ->
1. AND operator
- db.students.find({$and : [{marks : {$gt : 60}}, {marks : {$lte : 70}}]})

2. OR operator
- db.students.find({$or : [{marks : {$lt : 50}}, {marks : {$gt : 90}}]})

3. NOR operator
- db.students.find({$nor : [{marks : {$lt : 50}}, {marks : {$gt : 90}}]})

4. NOT operator
- db.students.find({marks : {$not : {$gt : 60}}})


Projection ->
To show/hide some fields of a documents. (1 : include, 0 : exclude)
IMP : You cannot use 0 and 1 in the same operation

db.students.find({//condition check}, {//projection})
db.students.find({}, {name : 1}) //correct
db.students.find({}, {name : 1, marks : 0}) //incorrect
db.students.find({}, {name : 1, _id : 0}) //correct


Update Commands ->
1. $set - when you want to update/add any value
db.collectionName.updateOne({filterKey : filterValue}, {$set : {key : updatedValue}})
db.collectionName.updateMany({filterKey : filterValue}, {$set : {key : updatedValue}})

eg - db.students.updateMany({marks : {$gte : 95}}, {$set : {highestScorer : true}})
eg - db.students.updateMany({}, {$set : {pass : true}})
eg - db.students.updateMany({marks : {$lte : 60}}, {$set : {pass : false}})

2. $unset - when you want to remove the value(s).
db.collectionName.updateMany({filterKey : filterValue}, {$unset : {key : 1}})

eg - db.students.updateMany({}, {$unset : {highestScorer : 1}})

3. $rename - when you want to rename the key
db.collectionName.updateMany({filterKey : filterValue}, {$rename : {keyName : newKeyName}})

eg - db.students.updateMany({marks : {$gte : 91}}, {$rename : {pass : "highestScorer"}})


Delete Commands ->
1. db.collectionName.deleteOne({key : value})
2. db.collectionName.deleteMany({key : value})

eg - db.students.deleteMany({marks : {$lt : 60}})



Indexes -
Used to perform the similar action faster.
Benefits : 
1. Accelerated data retrieval
2. Rapid sorting based on specified fields.
3. Aggregation operation becomes efficient.
4. Multiple fields indexing

Drawbacks : 
Should only be used when you have a large collection
Should only be used when you are searching for 1-2% of documents out of all the documents present in the collection.

Create an index (_id is by default an index)
db.students.createIndex({key : 1})

Getting an index
db.students.getIndexes()

Deleting an index
db.students.dropIndex({key : 1})



Aggregation -
It is a mongodb framework, used to process multiple documents and return computed result.
Aggregation Pipeline : It consist of multiple stages each performing a specific operation

Benefits : 
1. Complex calculations are possible.
2. Data can be combined and reshaped and computed for insights
3. It can handle large data efficiently.

Common Stages of Aggregation : 
1. $match - Filter documents
db.students.aggregate([
    {$match : {marks : {$gte : 91}}}
])
2. $project - Select & reshape fields
db.items.aggregate([
    {$project : {item_name : 1, price : 1, _id : 0}}
])
3. $sort - sorting
db.items.aggregate([
    {$sort : {price : 1}}
])
4. $group - group the fields
db.items.aggregate([
    {$group : {
        _id : '$item_name'
        totalQuantity : {$sum : '$quantity'}
    }}
])

5. $lookup - Join collections

